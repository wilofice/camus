Camus CLI - Functional Specification (v1.1)This document outlines the commands, arguments, and expected behavior for the C++-based, locally-run code interaction CLI, named Camus.1. Global Concepts & OptionsThese options can be used with any command.--help, -h: Displays a help message for the CLI or a specific command.--verbose, -v: Enables detailed logging output for debugging purposes.--model <model_alias>: Specifies which configured LLM to use for the operation. Defaults to a pre-configured model.--non-interactive, -y: Skips any interactive confirmation prompts and proceeds with the default action.2. Core CommandsinitPurpose: Initializes Camus configuration within the current project directory.Syntax: camus initBehavior:Creates a .camus/ directory in the project's root.Inside, it creates a config.yml file.This config file will store project-specific settings, such as the path to the llama.cpp models, default model choice, build commands, and test commands.It will interactively ask the user for these settings or attempt to auto-detect them (e.g., find a CMakeLists.txt or Makefile).modifyPurpose: Modifies source code based on a natural language prompt.Syntax: camus modify "<prompt>" --file <file_path>Arguments & Options:<prompt> (Required): A string describing the desired code change (e.g., "add a function that takes two integers and returns their sum").--file, -f (Required): The path to the source file to be modified.Behavior / LLM Interaction:The CLI reads the entire content of the specified <file_path>.It constructs a detailed prompt for the LLM, including:The user's natural language instruction.The complete source code of the file.A system message instructing the model to respond only with the modified, complete code block or file, without any explanatory text.The CLI sends this prompt to the llama.cpp backend.It receives the LLM-generated code.It displays a diff view to the user, highlighting the changes.It prompts the user for confirmation ([a]pply, [d]iscard, [r]efine) before overwriting the file.buildPurpose: Compiles the project using the configured build command.Syntax: camus build [cmake_args...]Arguments & Options:[cmake_args...] (Optional): Any additional arguments to pass directly to the underlying build command (e.g., -DCMAKE_BUILD_TYPE=Release).Behavior / LLM Interaction:The CLI reads the build command from .camus/config.yml.It executes the command (e.g., cmake --build .).LLM Interaction: If the build fails, the CLI will:Capture the compiler's error output.Send the error log and the source code of the file(s) that caused the error to the LLM.Ask the LLM to analyze the error and suggest a fix.Display the LLM's suggestion to the user.testPurpose: Runs the project's tests using the configured test command.Syntax: camus test [test_args...]Arguments & Options:[test_args...] (Optional): Any additional arguments to pass to the test runner (e.g., --gtest_filter=MyTest.*).Behavior / LLM Interaction:The CLI executes the test command from .camus/config.yml.It captures the output from the test runner.LLM Interaction: Similar to the build command, if a test fails, the CLI will:Send the failing test's output, the test code, and the code being tested to the LLM.Ask the LLM for a probable cause and a suggested fix.Present the analysis to the user.refactorPurpose: Applies specific, targeted refactoring patterns to the code.Syntax: camus refactor "<style>" --file <file_path>Arguments & Options:<style> (Required): The refactoring instruction (e.g., "convert this raw loop to use std::for_each", "make this function const-correct", "extract the selected code into a new function named 'calculate_results'").--file, -f (Required): The path to the source file to be refactored.Behavior / LLM Interaction:This command is similar to modify but more focused.It constructs a highly specific prompt for the LLM, instructing it to perform a specific refactoring task while preserving the existing logic.It follows the same diff -> confirm workflow as modify.commitPurpose: Generates a descriptive commit message and commits staged changes.Syntax: camus commitBehavior / LLM Interaction:The CLI first checks if there are any staged changes (git diff --staged). If not, it exits.It captures the output of the staged diff.LLM Interaction: It sends the diff to the LLM with a prompt to "Generate a concise, conventional commit message for the following changes."It receives the generated commit message from the LLM.It presents the message to the user and asks for confirmation or allows them to edit it.Upon confirmation, it executes git commit -m "<message>".pushPurpose: Pushes committed changes to the remote repository.Syntax: camus pushBehavior:This is a straightforward wrapper around git push.It identifies the current branch and its remote upstream.It executes the git push command.3. Future Enhancementsmodify Command Pipeline: Implement a feature to chain multiple LLMs together for the modify command (e.g., camus modify ... --model model1,model2). The output from the first model will serve as the input for the second, allowing for more advanced, multi-step code generation and refinement.push Command Summary: The push command could interact with the LLM to summarize the pushed commits for inclusion in a change log or release notes.
